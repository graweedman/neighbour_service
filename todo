# Neighbor Discovery Service - TODO List

## üìÅ Project Setup
- [x] Set up folder structure
- [x] Create Makefile
- [x] service.cpp, service.h
- [x] cli.cpp
- [x] common.h (for shared constants, structs, etc.)
- [x] Write Makefile for building both binaries (service, cli)

## ‚öôÔ∏è Service Program

### üß† Initialization
- [x] Get all network interfaces (excluding loopback)
- [x] Get each interface's IP address and subnet
- [x] Bind sockets for each subnet/interface (UDP broadcast or multicast)
- [x] Set up UNIX domain socket (or localhost TCP) for CLI communication

### üì° Peer Discovery
- [x] Periodically (e.g. every 5 seconds) broadcast "hello" messages on all interfaces
- [x] Listen for replies from other services
- [x] Parse messages to identify neighbors
- [x] Match replies by subnet to confirm they are neighbors

### üïí Neighbor Tracking
- [x] Store a list of active neighbors (IP + MAC + last_seen timestamp)
- [x] Expire any neighbors not seen in the last 30 seconds

### üìû CLI Communication
- [x] Accept connections from CLI tool
- [x] On request, return list of current neighbors in plain text:
  - Use non-blocking I/O or select() (no threads allowed)

## üñ•Ô∏è CLI Program
- [x] Connect to local service (UNIX or TCP socket)
- [x] Send command: e.g., "LIST\n"
- [x] Receive neighbor list
- [x] Print formatted output to terminal:
  ```
    Neighbors:
  2dbe0f0789384b48822e2bfe524db290 - Connections:
  - 192.168.100.191 (52:54:0:33:47:db)
  Interfaces:
  - virbr100

  1d1febfabcc049419cd66b5306aa19a3 - Connections:
  - 192.168.122.168 (52:54:0:f0:ce:73)
  - 192.168.100.192 (52:54:0:ee:d6:9f)
  Interfaces:
  - virbr0
  - virbr100
  ...
  ```

## üí° Protocol Design (Internal)
- [x] Define a simple message protocol for discovery:
  - Example hello packet: `"HELLO <NodeID> <IP> <MAC> "`
- [x] Define CLI-to-service protocol:
  - CLI sends: `"LIST\n"`
  - Service replies with lines: `<IP> <MAC>\n`

## üß™ Testing & Debugging

### Local Testing
- [x] Create 3+ VMs in virt-manager with shared virtual network
- [x] One VM should have 2 network interfaces
- [x] Run service on all VMs
- [x] Use CLI tool to verify that neighbors are detected and listed correctly

### Edge Cases
- [x] Changing IP address while service is running
- [x] Device connecting/disconnecting from network
- [x] Service restarting

## üßº Finishing Touches
- [x] Add usage instructions (e.g., --help for CLI)
- [x] Add debug/logging output (optional, maybe controllable via flag)
- [x] Ensure compliance:
  - [x] No threads
  - [x] No exceptions
  - [x] No system programs/tools
  - [x] g++, stdc++ only